class Solution
{
    public static int wordBreak(int n, String s, ArrayList<String> dictionary )
    {
        Set<String> wordSet = new HashSet<>(dictionary);
        
        int len = s.length();
        boolean[] dp = new boolean[len + 1];
        dp[0] = true; // Empty string is always breakable
        
        // Dynamic programming to check if substrings are breakable
        for (int i = 1; i <= len; i++) {
            for (int j = 0; j < i; j++) {
                if (dp[j] && wordSet.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        
        return dp[len] ? 1 : 0; // Return 1 if string is breakable, otherwise 0
    }
}
