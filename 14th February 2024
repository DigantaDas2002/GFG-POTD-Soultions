class Solution {
    int time = 0;

    public ArrayList<ArrayList<Integer>> criticalConnections(int v, ArrayList<ArrayList<Integer>> adj) {
        ArrayList<ArrayList<Integer>> result = new ArrayList<>();
        int[] low = new int[v];
        int[] disc = new int[v];
        Arrays.fill(low, -1);
        Arrays.fill(disc, -1);
        boolean[] visited = new boolean[v];
        ArrayList<Integer>[] graph = new ArrayList[v];

        for (int i = 0; i < v; i++) {
            graph[i] = new ArrayList<>();
            for (int neighbor : adj.get(i)) {
                graph[i].add(neighbor);
            }
        }

        for (int i = 0; i < v; i++) {
            if (!visited[i]) {
                dfs(i, -1, low, disc, visited, graph, result);
            }
        }

        // Sort the critical connections list
        Collections.sort(result, new Comparator<ArrayList<Integer>>() {
            @Override
            public int compare(ArrayList<Integer> a, ArrayList<Integer> b) {
                int u1 = a.get(0);
                int v1 = a.get(1);
                int u2 = b.get(0);
                int v2 = b.get(1);
                if (u1 != u2) return u1 - u2;
                return v1 - v2;
            }
        });

        return result;
    }

    private void dfs(int u, int parent, int[] low, int[] disc, boolean[] visited, ArrayList<Integer>[] graph, ArrayList<ArrayList<Integer>> result) {
        visited[u] = true;
        disc[u] = low[u] = ++time;

        for (int neighbor : graph[u]) {
            if (neighbor == parent) continue;
            if (!visited[neighbor]) {
                dfs(neighbor, u, low, disc, visited, graph, result);
                low[u] = Math.min(low[u], low[neighbor]);
                if (low[neighbor] > disc[u]) {
                    ArrayList<Integer> criticalConnection = new ArrayList<>();
                    criticalConnection.add(Math.min(u, neighbor));
                    criticalConnection.add(Math.max(u, neighbor));
                    result.add(criticalConnection);
                }
            } else {
                low[u] = Math.min(low[u], disc[neighbor]);
            }
        }
    }
}
