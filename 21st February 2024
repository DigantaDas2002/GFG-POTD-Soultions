class Solution{
    static int countWays(int n, String s){
         int mod = 1003;
        int[][][] dp = new int[n][n][2];

        for (int gap = 0; gap < n; gap += 2) {
            for (int i = 0, j = gap; j < n; i += 2, j += 2) {
                if (gap == 0) {
                    dp[i][j][0] = s.charAt(i) == 'F' ? 1 : 0;
                    dp[i][j][1] = s.charAt(i) == 'T' ? 1 : 0;
                } else {
                    for (int k = i + 1; k <= j - 1; k += 2) {
                        char operator = s.charAt(k);
                        int leftTrue = dp[i][k - 1][1];
                        int leftFalse = dp[i][k - 1][0];
                        int rightTrue = dp[k + 1][j][1];
                        int rightFalse = dp[k + 1][j][0];

                        if (operator == '&') {
                            dp[i][j][1] += (leftTrue * rightTrue) % mod;
                            dp[i][j][0] += ((leftTrue * rightFalse) % mod + (leftFalse * rightTrue) % mod + (leftFalse * rightFalse) % mod) % mod;
                        } else if (operator == '|') {
                            dp[i][j][1] += ((leftTrue * rightTrue) % mod + (leftTrue * rightFalse) % mod + (leftFalse * rightTrue) % mod) % mod;
                            dp[i][j][0] += (leftFalse * rightFalse) % mod;
                        } else if (operator == '^') {
                            dp[i][j][1] += ((leftTrue * rightFalse) % mod + (leftFalse * rightTrue) % mod) % mod;
                            dp[i][j][0] += ((leftTrue * rightTrue) % mod + (leftFalse * rightFalse) % mod) % mod;
                        }
                    }
                }
            }
        }
        return dp[0][n - 1][1] % mod;
    }
}
