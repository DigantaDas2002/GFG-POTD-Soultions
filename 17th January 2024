class Solution {
    static ArrayList<ArrayList<Integer>> uniquePerms(ArrayList<Integer> arr , int n) {
        // code here
        ArrayList<ArrayList<Integer>> results = new ArrayList<>();
        boolean[] used = new boolean[n];
        arr.sort(null);  // Sort to ensure sorted permutations
        helper(arr, used, new ArrayList<>(), results);
        return results;
    }

    private static void helper(ArrayList<Integer> arr, boolean[] used, ArrayList<Integer> current, ArrayList<ArrayList<Integer>> results) {
        if (current.size() == arr.size()) {
            results.add(new ArrayList<>(current));
            return;
        }

        for (int i = 0; i < arr.size(); i++) {
            if (used[i]) {
                continue;
            }

            // Handle duplicates: Only proceed if the current element is different from the previous one or the previous one is not used
            if (i > 0 && arr.get(i) == arr.get(i - 1) && !used[i - 1]) {
                continue;
            }

            used[i] = true;
            current.add(arr.get(i));
            helper(arr, used, current, results);
            current.remove(current.size() - 1);
            used[i] = false;
        }
    }
};
